{"version":3,"sources":["../node_modules/typescript/lib sync","parseSpec.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","mochaFunctions","getChildOfKind","node","kind","result","forEachChild","n","getKind","removeBraces","trim","substring","length","getBlock","callExpression","SyntaxKind","CallExpression","functionExpression","FunctionExpression","ArrowFunction","Block","getMochaNodeTitle","stringLiteral","StringLiteral","templateExpression","TemplateExpression","getText","getMochaNodes","mochaNodes","Node","isExpressionStatement","expression","getExpression","isCallExpression","isIdentifier","getExpressionIdentifier","includes","block","push","type","title","children","level","parseSpec","specFile","project","Project","sourceFile","createSourceFile","flatten","getFirstChildByKindOrThrow","ExpressionStatement","getParent","_","nodes","forEach","processNew","log","hooks","newLog","structure","before","main","after","beforeEach","filter","map","join","afterEach","currentPart","child","containsItOrDescribe","getFullText","isBlock","getBlocksInside","replaceWithText","reduce","prev","curr","App","useState","setSpecFile","parsedFile","setParsedFile","selected","setSelected","processedFile","setProcessedFile","useEffect","parsedFile2","selectedDescribe","processedDescribe","pretty","prettier","format","parser","plugins","parserTypescript","formatText","className","style","display","flexDirection","height","width","defaultLanguage","defaultValue","onChange","value","index","paddingLeft","event","target","checked","a","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.666a8e0c.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 33;","import { Project, SyntaxKind, Node, ts, ExpressionStatement, SourceFile } from 'ts-morph';\n\nexport interface ParsedSpec {\n\tmochaNodes: MochaNode[];\n\tsourceFile: SourceFile;\n}\n\nexport interface MochaNode {\n  type: string;\n  title: string;\n\tchildren: MochaNode[];\n\tnode: Node<ts.Node>;\n\tlevel: number;\n}\n\nconst mochaFunctions = ['afterEach', 'after', 'beforeEach', 'before', 'describe', 'it'];\n\nfunction getChildOfKind(node: Node<ts.Node>, kind: SyntaxKind): Node<ts.Node> | undefined {\n\tlet result;\n\n\tnode.forEachChild(n => {\n\t\tif (n.getKind() === kind) {\n\t\t\tresult = n;\n\t\t}\n\t});\n\n\treturn result;\n}\n\nfunction removeBraces(code: string): string {\n\treturn code.trim().substring(1, code.length - 1);\n}\n\nexport function getBlock(node: Node<ts.Node>): Node<ts.Node> | undefined {\n  const callExpression = getChildOfKind(node, SyntaxKind.CallExpression);\n  if (!callExpression) return;\n\n  const functionExpression = getChildOfKind(callExpression, SyntaxKind.FunctionExpression) || getChildOfKind(callExpression, SyntaxKind.ArrowFunction);\n  if (!functionExpression) return;\n\n\tconst block = getChildOfKind(functionExpression, SyntaxKind.Block);\n\treturn block;\n}\n\nfunction getMochaNodeTitle(node: Node<ts.Node>): string {\n  const callExpression = getChildOfKind(node, SyntaxKind.CallExpression);\n  if (!callExpression) return '';\n\n  const stringLiteral = getChildOfKind(callExpression, SyntaxKind.StringLiteral);\n  if (!stringLiteral) {\n\t\tconst templateExpression = getChildOfKind(callExpression, SyntaxKind.TemplateExpression);\n\t\tif (!templateExpression) return '';\n\n\t\treturn removeBraces(templateExpression.getText());\n\t};\n\n\t// return stringLiteral && removeBraces(stringLiteral.getText());\n\treturn removeBraces(stringLiteral.getText());\n}\n\nfunction getExpressionIdentifier(node: ExpressionStatement): string {\n\tconst expression = node.getExpression();\n\tif (Node.isCallExpression(expression)) {\n\t\tconst id = expression.getExpression();\n\t\tif (Node.isIdentifier(id)) {\n\t\t\treturn id.getText();\n\t\t}\n\t}\n\n\treturn '';\n}\n\nfunction getMochaNodes(node: Node<ts.Node>): MochaNode[] {\n\tif (!node) return [];\n\n\tconst mochaNodes: MochaNode[] = [];\n\n\tnode.forEachChild(n => {\n\t\tif (Node.isExpressionStatement(n)) {\n\t\t\tconst expression = getExpressionIdentifier(n);\n\t\t\tif (mochaFunctions.includes(expression)) {\n\t\t\t\tconst block = getBlock(n);\n\n\t\t\t\tmochaNodes.push({\n\t\t\t\t\ttype: expression,\n\t\t\t\t\ttitle: getMochaNodeTitle(n),\n\t\t\t\t\tchildren: block ? getMochaNodes(block) : [],\n\t\t\t\t\tnode: n,\n\t\t\t\t\tlevel: 0,\n\t\t\t\t})\n\t\t\t} else {\n\t\t\t\tmochaNodes.push({\n\t\t\t\t\ttype: '',\n\t\t\t\t\ttitle: '',\n\t\t\t\t\tchildren: getMochaNodes(n),\n\t\t\t\t\tnode: n,\n\t\t\t\t\tlevel: 0,\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tmochaNodes.push({\n\t\t\t\ttype: '',\n\t\t\t\ttitle: '',\n\t\t\t\tchildren: getMochaNodes(n),\n\t\t\t\tnode: n,\n\t\t\t\tlevel: 0,\n\t\t\t});\n\t\t}\n\t});\n\n\treturn mochaNodes;\n}\n\nexport default function parseSpec(specFile: string): ParsedSpec {\n  const project = new Project();\n\ttry {\n  \tconst sourceFile = project.createSourceFile('spec.ts', specFile)\n\t\tconst node = sourceFile.getFirstChildByKindOrThrow(SyntaxKind.ExpressionStatement);\n\t\treturn {\n\t\t\tmochaNodes: flatten(getMochaNodes(node.getParent())),\n\t\t\tsourceFile: sourceFile,\n\t\t};\n\t} catch (_) {\n\t\treturn {\n\t\t\tmochaNodes: [],\n\t\t\tsourceFile: project.createSourceFile('error.ts', ''),\n\t\t}\n\t}\n}\n\nfunction flatten(nodes: MochaNode[], level: number = 0): MochaNode[] {\n\tconst result: MochaNode[] = [];\n\n\tnodes.forEach(node => {\n\t\tnode.level = level;\n\t\tresult.push(node);\n\t\tresult.push(...flatten(node.children, level + 1));\n\t});\n\n\treturn result;\n}\n","import React, { useState, useEffect } from 'react';\nimport Editor from '@monaco-editor/react';\nimport prettier from 'prettier/standalone';\nimport parserTypescript from 'prettier/parser-typescript';\nimport { Node } from 'ts-morph';\n\nimport parseSpec, { MochaNode, ParsedSpec, getBlock } from './parseSpec';\n\nconst spec = `// paste spec here`;\n\nfunction removeBraces(code: string): string {\n\treturn code.trim().substring(1, code.length - 2);\n}\n\ninterface Hooks {\n\tbeforeEach: string;\n\tafterEach: string;\n}\n\nfunction processNew(node: MochaNode, log: string, hooks?: Hooks): string {\n\tif (node.type === 'describe') {\n\t\tconst structure: {\n\t\t\tbefore: string[],\n\t\t\tmain: string[],\n\t\t\tafter: string[],\n\t\t} = {\n\t\t\tbefore: [],\n\t\t\tmain: [],\n\t\t\tafter: [],\n\t\t};\n\n\t\tlet newLog: string;\n\t\tif (log === '__rootDescribe') {\n\t\t\tnewLog = '';\n\t\t} else {\n\t\t\tnewLog = `${log ? `${log} - ` : ''}${node.title}`;\n\t\t}\n\n\t\tconst beforeEach = node.children.filter(node => node.type === 'beforeEach').map(n => processNew(n, newLog)).join('\\n');\n\t\tconst afterEach = node.children.filter(node => node.type === 'afterEach').map(n => processNew(n, newLog)).join('\\n');\n\n\t\tlet currentPart = structure.before;\n\n\t\tnode.children.forEach(child => {\n\t\t\tif (child.type === 'before') {\n\t\t\t\tstructure.before.push(processNew(child, newLog));\n\t\t\t} else if (child.type === 'after') {\n\t\t\t\tstructure.after.push(processNew(child, newLog));\n\t\t\t} else if (child.type === 'beforeEach' || child.type === 'afterEach') {\n\n\t\t\t} else {\n\t\t\t\tif (child.type === 'it' || child.type === 'describe' || containsItOrDescribe(child)) {\n\t\t\t\t\tcurrentPart = structure.main;\n\t\t\t\t}\n\n\t\t\t\tcurrentPart.push(processNew(child, newLog, {\n\t\t\t\t\tbeforeEach,\n\t\t\t\t\tafterEach,\n\t\t\t\t}));\n\t\t\t}\n\t\t});\n\n\t\tconst result = structure.before.join('\\n') + structure.main.join('\\n') + structure.after.join('\\n');\n\n\t\tif (hooks) {\n\t\t\treturn hooks.beforeEach + result + hooks.afterEach;\n\t\t} else {\n\t\t\treturn result;\n\t\t}\t\t\n\t} else if (node.type === 'it') {\n\t\tconst block = getBlock(node.node);\n\t\tif (block) {\n\t\t\tlet result: string;\n\n\t\t\tif (hooks) {\n\t\t\t\tresult = hooks.beforeEach + block.getFullText() + hooks.afterEach;\n\t\t\t} else {\n\t\t\t\tresult = block.getFullText();\n\t\t\t}\n\n\t\t\treturn `\n\t\t\t\tcy.log(\\`${`${log ? `${log} - ` : ''}${node.type} ${node.title}`.trim()}\\`);\n\t\t\t\t${result}\n\t\t\t`;\n\t\t} else {\n\t\t\treturn '';\n\t\t}\n\t} else if (node.type !== '') {\n\t\tconst block = getBlock(node.node);\n\t\tif (block) {\n\t\t\treturn `\n\t\t\t\tcy.log(\\`${`${log ? `${log} - ` : ''}${node.type} ${node.title}`.trim()}\\`);\n\t\t\t\t${block.getFullText()}\n\t\t\t`;\n\t\t} else {\n\t\t\treturn '';\n\t\t}\n\t} else if (Node.isBlock(node.node)) {\n\t\tconst result: string[] = [];\n\n\t\tnode.children.forEach(child => {\n\t\t\tresult.push(processNew(child, log, hooks));\n\t\t});\n\n\t\treturn result.join('\\n');\n\t} else {\n\t\tif (containsItOrDescribe(node)) {\n\t\t\tconst blocksInside = getBlocksInside(node);\n\n\t\t\tblocksInside.forEach(block => {\n\t\t\t\tblock.node = block.node.replaceWithText(`{${processNew(block, log)}}`);\n\t\t\t});\n\t\t}\n\t\t\n\t\treturn node.node.getFullText();\n\t}\n}\n\nfunction getBlocksInside(node: MochaNode): MochaNode[] {\n\tconst result: MochaNode[] = [];\n\n\tnode.children.forEach(child => {\n\t\tif (Node.isBlock(child.node)) {\n\t\t\tresult.push(child);\n\t\t} else {\n\t\t\tresult.push(...getBlocksInside(child));\n\t\t}\n\t});\n\n\treturn result;\n}\n\nfunction containsItOrDescribe(node: MochaNode): boolean {\n\treturn node.children.reduce<boolean>((prev, curr) => {\n\t\tif (prev) return true;\n\t\tif (curr.type === 'it' || curr.type === 'describe') return true;\n\t\treturn containsItOrDescribe(curr);\n\t}, false);\n}\n\n// function process(node: MochaNode, log: string, rootDescribe: boolean = false): string {\n// \tif (node.type === 'describe') {\n// \t\tconst befores = node.children.filter(node => node.type === 'before');\n// \t\tconst afters = node.children.filter(node => node.type === 'after');\n// \t\tconst beforeEachs = node.children.filter(node => node.type === 'beforeEach');\n// \t\tconst afterEachs = node.children.filter(node => node.type === 'afterEach');\n// \t\tconst others = node.children.filter(node => node.type === 'it' || node.type === 'describe');\n\n// \t\tconst newLog = `${log ? `${log} - ` : ''}${rootDescribe ? '' : node.title}`\n// \t\tconst processWithLog = (n: MochaNode): string => process(n, newLog);\n\n// \t\treturn `\n// \t\t\t${befores.map(processWithLog).join('\\n')}\n\n// \t\t\t${others.map(other => {\n// \t\t\t\treturn `\n// \t\t\t\t\t${beforeEachs.map(processWithLog).join('\\n')}\n\n// \t\t\t\t\t${processWithLog(other)}\n\n// \t\t\t\t\t${afterEachs.map(processWithLog).join('\\n')}\n// \t\t\t\t`;\n// \t\t\t}).join('\\n')}\n\n// \t\t\t${afters.map(processWithLog).join('\\n')}\n// \t\t`;\n// \t} else {\n// \t\tconst block = getBlock(node.node);\n// \t\treturn block ? `\n// \t\t\tcy.log('${`${log ? `${log} - ` : ''}${node.type} ${node.title}`.trim()}');\n// \t\t\t${block.getFullText()}\n// \t\t` : '';\n// \t}\n// }\n\nfunction App() {\n  const [specFile, setSpecFile] = useState(spec);\n  const [parsedFile, setParsedFile] = useState<ParsedSpec | undefined>();\n  const [selected, setSelected] = useState<number[]>([]);\n  const [processedFile, setProcessedFile] = useState('');\n\n\tuseEffect(() => {\n\t\tsetParsedFile(parseSpec(specFile));\n\t}, [specFile]);\n\n  useEffect(() => {\n    if (!specFile || !parsedFile || selected.length === 0) return;\n\n    const parsedFile2 = parseSpec(specFile);\n\n\t\tconst selectedDescribe = parsedFile2.mochaNodes.filter(node => node.type === 'describe')[selected[0]];\n\n\t\tconst processedDescribe = processNew(selectedDescribe, '__rootDescribe');\n\n\t\t// selectedDescribe.children.forEach(child => {\n\t\t// \tif (Node.isExpressionStatement(child.node)) {\n\t\t// \t\tchild.node.remove();\n\t\t// \t}\n\t\t// });\n\n\t\t// const declarations = getBlock(selectedDescribe.node);\n\n\t\tconst result = `\n\t\t\tit('${selectedDescribe.title}', () => {\n\t\t\t\t${/*declarations ? removeBraces(declarations.getFullText()) : ''*/''}\n\t\t\t\t${processedDescribe}\n\t\t\t});\n\t\t`\n\n\t\tparsedFile2.mochaNodes.filter(node => node.type === 'describe')[selected[0]].node.replaceWithText(\n\t\t\t// prettier.format(result, { parser: 'typescript', plugins: [ parserTypescript ]})\n\t\t\tresult\n\t\t);\n\t\t\n\t\ttry {\n\t\t\tconst pretty = prettier.format(parsedFile2.sourceFile.getText(), { parser: 'typescript', plugins: [ parserTypescript ]})\n\t\t\tsetProcessedFile(pretty);\n\t\t} catch (_) {\n\t\t\tparsedFile2.sourceFile.formatText();\n\t\t\tsetProcessedFile(parsedFile2.sourceFile.getText());\n\t\t}\n  }, [specFile, parsedFile, selected]);\n\n  return (\n    <div className=\"App\" style={{ display: 'flex', flexDirection: 'row' }}>\n      <Editor\n        height=\"90vh\"\n        width=\"40vw\"\n        defaultLanguage=\"typescript\"\n        defaultValue={specFile}\n        onChange={value => {\n          if (value) {\n            setSpecFile(value);\n          }\n        }}\n      />\n      <div style={{ width: '20vw' }}>\n        {parsedFile && parsedFile\n\t\t\t\t\t.mochaNodes\n\t\t\t\t\t.filter(node => node.type === 'describe')\n\t\t\t\t\t.map((node, index) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<div key={index}>\n\t\t\t\t\t\t\t\t<label style={{ paddingLeft: node.level * 20 }}>\n\t\t\t\t\t\t\t\t\t<input type=\"checkbox\" onChange={event => {\n\t\t\t\t\t\t\t\t\t\tsetSelected(prev => {\n\t\t\t\t\t\t\t\t\t\t\tif (event.target.checked) {\n\t\t\t\t\t\t\t\t\t\t\t\treturn [...prev, index];\n\t\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t\treturn prev.filter(a => a !== index);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t}} />\n\t\t\t\t\t\t\t\t\t{' '}{node.title}\n\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t);\n        \t})\n\t\t\t\t}\n      </div>\n      <div>\n        <Editor\n          height=\"90vh\"\n          width=\"40vw\"\n          defaultLanguage=\"typescript\"\n          value={processedFile}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
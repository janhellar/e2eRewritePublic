{"version":3,"sources":["../node_modules/typescript/lib sync","fixtures/exampleSpec.ts","utils/typescript.ts","utils/common.ts","utils/mocha.ts","components/App.tsx","reportWebVitals.ts","index.tsx"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","exampleSpec","getParsedSourceFile","Project","createSourceFile","getCallIdentifier","node","Node","isExpressionStatement","expression","getExpression","isCallExpression","leftHandSideExpression","isIdentifier","isPropertyAccessExpression","getText","getChildOfKind","kind","result","forEachChild","n","getKind","getBlocksInside","child","isBlock","push","getCallbackBlock","callExpression","SyntaxKind","CallExpression","functionExpression","FunctionExpression","ArrowFunction","Block","removeSurroundingChars","text","trim","substring","length","mochaHooks","getDescribeCalls","level","isDescribe","isMochaCallOfType","title","getMochaCallTitle","flattenDescribeSpecs","sourceFile","describeCalls","forEach","describeCall","replaceWithText","block","logPrefix","hooks","children","getChildren","befores","filter","afters","map","getFullText","join","getFlattenedHooks","eachHooks","getFlattenedEachHooks","sections","sortDescribeContent","isMochaHook","isSkipped","wrapWithQuotes","flattenNodes","before","main","flattenDescribeSpec","prettier","format","parser","plugins","parserTypescript","useTabs","singleQuote","trailingComma","arrowParens","endOfLine","_","formatText","containsItOrDescribe","reduce","prev","curr","flatten","newLogPrefix","prependLog","eachHooksInside","after","redundantCurlyBraces","wrapCodeWithEachHooks","wrapWithSkipCode","flattenDescribe","getCyLog","removeRedundantCurlyBraces","flattenIt","flattenHook","flattenBlock","flattenBlocksInside","nodes","prefix","log","beforeEach","getFlattenedEachHooksOfType","afterEach","hookType","currentSection","type","callIdentifier","endsWith","includes","stringLiteral","StringLiteral","templateExpression","TemplateExpression","redundant","isVariableStatement","isFunctionDeclaration","match","App","useState","setSourceFile","selected","setSelected","disabled","setDisabled","targetFile","setTargetFile","useEffect","selectedDescribes","getFirstChild","getParent","index","className","style","display","flexDirection","overflowY","height","width","defaultLanguage","defaultValue","onChange","value","options","minimap","enabled","lineNumbers","padding","borderLeft","borderRight","describe","paddingLeft","checked","event","describes","newSelected","newDisabled","a","following","slice","levelBelow","i","ind","onChangeSelected","target","readOnly","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.452e0d63.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 33;","const exampleSpec = `\n// paste spec here\n\n// example:\n\ndescribe('test D', () => {\n\n\tbefore(() => {\n\t\tbeforeCommand();\n\t});\n\n\tit('should test 1', () => {\n\t\tcommand1();\n\t});\n\n\tit('should test 2', () => {\n\t\tcommand2();\n\t});\n\n});\n`;\n\nexport default exampleSpec;\n","import { SyntaxKind, Node, ts, SourceFile, Project } from 'ts-morph';\n\nexport function getParsedSourceFile(code: string): SourceFile {\n  const project = new Project();\n  return project.createSourceFile('code.ts', code);\n}\n\nexport function getCallIdentifier(node: Node<ts.Node>): string {\n  if (Node.isExpressionStatement(node)) {\n    const expression = node.getExpression();\n    if (Node.isCallExpression(expression)) {\n      const leftHandSideExpression = expression.getExpression();\n      if (\n        Node.isIdentifier(leftHandSideExpression) ||\n        Node.isPropertyAccessExpression(leftHandSideExpression)\n      ) {\n        return leftHandSideExpression.getText();\n      }\n    }\n  }\n\n  return '';\n}\n\nexport function getChildOfKind(node: Node<ts.Node>, kind: SyntaxKind): Node<ts.Node> | undefined {\n  let result: Node<ts.Node> | undefined;\n\n  node.forEachChild(n => {\n    if (n.getKind() === kind) {\n      result = n;\n    }\n  });\n\n  return result;\n}\n\nexport function getBlocksInside(node: Node<ts.Node>): Node<ts.Node>[] {\n\tconst result: Node<ts.Node>[] = [];\n\n\tnode.forEachChild(child => {\n\t\tif (Node.isBlock(child)) {\n\t\t\tresult.push(child);\n\t\t} else {\n\t\t\tresult.push(...getBlocksInside(child));\n\t\t}\n\t});\n\n\treturn result;\n}\n\nexport function getCallbackBlock(node: Node<ts.Node>): Node<ts.Node> | undefined {\n  const callExpression = getChildOfKind(node, SyntaxKind.CallExpression);\n  if (!callExpression) return;\n\n  const functionExpression = getChildOfKind(callExpression, SyntaxKind.FunctionExpression) || getChildOfKind(callExpression, SyntaxKind.ArrowFunction);\n  if (!functionExpression) return;\n\n\tconst block = getChildOfKind(functionExpression, SyntaxKind.Block);\n\treturn block;\n}\n","export function removeSurroundingChars(text: string) {\n  return text.trim().substring(1, text.length - 1);\n}\n","import { SyntaxKind, Node, ts, SourceFile } from 'ts-morph';\nimport prettier from 'prettier/standalone';\nimport parserTypescript from 'prettier/parser-typescript';\n\nimport { getCallIdentifier, getChildOfKind, getCallbackBlock, getBlocksInside } from './typescript';\nimport { removeSurroundingChars } from './common';\n\nconst mochaHooks = ['afterEach', 'after', 'beforeEach', 'before'];\nexport interface DescribeCall {\n  title: string;\n  level: number;\n  node: Node<ts.Node>;\n}\n\ninterface DescribeSections {\n  before: Node<ts.Node>[];\n  main: Node<ts.Node>[];\n  after: Node<ts.Node>[];\n}\n\ninterface EachHooks {\n\tbeforeEach: string;\n\tafterEach: string;\n}\n\nexport function getDescribeCalls(node: Node<ts.Node> | SourceFile, level: number = 0): DescribeCall[] {\n  const result: DescribeCall[] = [];\n\n  node.forEachChild(n => {\n    const isDescribe = isMochaCallOfType(n, 'describe');\n\n    if (isDescribe) {\n      result.push({\n        title: getMochaCallTitle(n),\n        level,\n        node: n,\n      });\n    }\n\n    result.push(...getDescribeCalls(n, isDescribe ? level + 1 : level));\n  });\n\n  return result;\n}\n\nexport function flattenDescribeSpecs(sourceFile: SourceFile, describeCalls: DescribeCall[]): string {\n  describeCalls.forEach(describeCall => {\n    describeCall.node.replaceWithText(flattenDescribeSpec(describeCall.node));\n  });\n    \n  try {\n    return prettier.format(sourceFile.getText(), {\n      parser: 'typescript',\n      plugins: [ parserTypescript ],\n      useTabs: true,\n      singleQuote: true,\n      trailingComma: 'all',\n      arrowParens: 'always',\n      endOfLine: 'lf',\n    });\n  } catch (_) {\n    sourceFile.formatText();\n    return sourceFile.getText();\n  }\n}\n\nfunction flattenDescribeSpec(node: Node<ts.Node>): string {\n  const block = getCallbackBlock(node);\n\n  if (!block) return '';\n\n  const logPrefix = '';\n  const hooks = getFlattenedHooks(block);\n  const eachHooks = getFlattenedEachHooks(block, logPrefix);\n  const children = getChildren(block).filter(node => !isMochaHook(node));\n  const sections = sortDescribeContent(children);\n\n  return `\n    describe${isSkipped(node) ? '.skip' : ''}(${wrapWithQuotes(getMochaCallTitle(node))}, () => {\n      ${flattenNodes(sections.before, logPrefix)}\n      \n      ${hooks}\n      \n      it('should pass', () => {\n        ${flattenNodes(sections.main, logPrefix, eachHooks)}\n      });\n    });\n  `;\n}\n\nfunction containsItOrDescribe(node: Node<ts.Node>): boolean {\n\treturn getChildren(node).reduce<boolean>((prev, curr) => {\n\t\tif (prev) return true;\n\t\tif (isMochaCallOfType(curr, 'it') || isMochaCallOfType(curr, 'describe')) return true;\n\t\treturn containsItOrDescribe(curr);\n\t}, false);\n}\n\nfunction flatten(node: Node<ts.Node>, logPrefix: string, eachHooks?: EachHooks): string {\n  if (isMochaCallOfType(node, 'describe')) {\n\t\treturn flattenDescribe(node, logPrefix, eachHooks);\n\t}\n  \n  if (isMochaCallOfType(node, 'it')) {\n\t\treturn flattenIt(node, logPrefix, eachHooks);\n\t}\n  \n  if (isMochaHook(node)) {\n\t\treturn flattenHook(node, logPrefix);\n\t}\n  \n  if (Node.isBlock(node)) {\n\t\treturn flattenBlock(node, logPrefix, eachHooks);\n\t}\n\n  if (containsItOrDescribe(node)) {\n    flattenBlocksInside(node, logPrefix, eachHooks);\n  }\n  \n  return node.getFullText();\n}\n\nfunction flattenDescribe(node: Node<ts.Node>, logPrefix: string, eachHooks?: EachHooks): string {\n  const block = getCallbackBlock(node);\n\n  if (!block) return '';\n\n  const sections = sortDescribeContent(getChildren(block));\n  const newLogPrefix = prependLog(logPrefix, getMochaCallTitle(node));\n  const eachHooksInside = getFlattenedEachHooks(block, newLogPrefix);\n\n  let result = `\n    ${flattenNodes(sections.before, newLogPrefix)}\n\n    ${flattenNodes(sections.main, newLogPrefix, eachHooksInside)}\n\n    ${flattenNodes(sections.after, newLogPrefix)}\n  `;\n\n  if (!redundantCurlyBraces(block)) {\n    result = `{\n      ${result}\n    }`;\n  }\n\n  result = wrapCodeWithEachHooks(result, eachHooks);\n\n  if (isSkipped(node)) {\n    result = wrapWithSkipCode(result);\n  }\n\n  return result;\n}\n\nfunction flattenNodes(nodes: Node<ts.Node>[], logPrefix: string, eachHooks?: EachHooks): string {\n  return nodes\n    .map(node => flatten(node, logPrefix, eachHooks))\n    .join(' ');\n}\n\nfunction flattenIt(node: Node<ts.Node>, logPrefix: string, eachHooks?: EachHooks): string {\n  const block = getCallbackBlock(node);\n  \n  if (!block) return '';\n\n  let result = `\n    ${getCyLog(logPrefix, node)}\n    ${removeRedundantCurlyBraces(block)}\n  `;\n\n  result = wrapCodeWithEachHooks(result, eachHooks);\n\n  if (isSkipped(node)) {\n    result = wrapWithSkipCode(result);\n  }\n\n  return result;\n}\n\nfunction flattenHook(node: Node<ts.Node>, logPrefix: string): string {\n  const block = getCallbackBlock(node);\n\n  if (!block) return '';\n    \n  return `\n    ${getCyLog(logPrefix, node)}\n    ${removeRedundantCurlyBraces(block)}\n  `;\n}\n\nfunction flattenBlock(block: Node<ts.Node>, logPrefix: string, eachHooks?: EachHooks): string {\n  const result: string[] = [];\n\n  block.forEachChild(child => {\n    result.push(flatten(child, logPrefix, eachHooks));\n  });\n\n  return result.join('\\n');\n}\n\nfunction flattenBlocksInside(node: Node<ts.Node>, logPrefix: string, eachHooks?: EachHooks) {\n  const blocksInside = getBlocksInside(node);\n\n  blocksInside.forEach(block => {\n    block.replaceWithText(`{${flatten(block, logPrefix, eachHooks)}}`);\n  });\n}\n\nfunction getCyLog(prefix: string, node: Node<ts.Node>): string {\n  const log = `${getCallIdentifier(node)} ${getMochaCallTitle(node)}`.trim();\n\n  return `cy.log(${wrapWithQuotes(prependLog(prefix, log))});`;\n}\n\nfunction prependLog(prefix: string, log: string): string {\n  return `${prefix ? `${prefix} - ` : ''}${log}`;\n}\n\nfunction getFlattenedEachHooks(block: Node<ts.Node>, logPrefix: string): EachHooks {\n  return {\n    beforeEach: getFlattenedEachHooksOfType(block, 'beforeEach', logPrefix),\n    afterEach: getFlattenedEachHooksOfType(block, 'afterEach', logPrefix),\n  };\n}\n\nfunction getFlattenedEachHooksOfType(block: Node<ts.Node>, hookType: string, logPrefix: string): string {\n  return getChildren(block)\n    .filter(node => isMochaCallOfType(node, hookType))\n    .map(node => flatten(node, logPrefix))\n    .join('\\n');\n}\n\nfunction getFlattenedHooks(block: Node<ts.Node>): string {\n  const children = getChildren(block);\n\n  const befores = children.filter(node => isMochaCallOfType(node, 'before'));\n  const afters = children.filter(node => isMochaCallOfType(node, 'after'));\n\n  return [...befores, ...afters].map(node => node.getFullText()).join('\\n');\n}\n\nfunction wrapCodeWithEachHooks(code: string, eachHooks?: EachHooks): string {\n  if (eachHooks) {\n    return eachHooks.beforeEach + code + eachHooks.afterEach;\n  } else {\n    return code;\n  }\n}\n\nfunction sortDescribeContent(nodes: Node<ts.Node>[]): DescribeSections {\n  const sections: DescribeSections = {\n    before: [],\n    main: [],\n    after: [],\n  };\n\n  let currentSection = sections.before;\n\n  nodes.forEach(node => {\n    if (isMochaCallOfType(node, 'before')) {\n      sections.before.push(node);\n    } else if (isMochaCallOfType(node, 'after')) {\n      sections.after.push(node);\n    } else if (!isMochaHook(node)) {\n      if (isMochaCallOfType(node, 'it') || isMochaCallOfType(node, 'describe') || containsItOrDescribe(node)) {\n        currentSection = sections.main;\n      }\n  \n      currentSection.push(node);\n    }\n  });\n\n  return sections;\n}\n\nfunction isMochaCallOfType(node: Node<ts.Node>, type: string): boolean {\n  if (Node.isExpressionStatement(node)) {\n    const callIdentifier = getCallIdentifier(node);\n    return callIdentifier === type || callIdentifier === `${type}.skip`;\n  }\n\n  return false;\n}\n\nfunction isSkipped(node: Node<ts.Node>): boolean {\n  if (Node.isExpressionStatement(node)) {\n    const callIdentifier = getCallIdentifier(node);\n    return callIdentifier.endsWith('.skip');\n  }\n\n  return false;\n}\n\nfunction isMochaHook(node: Node<ts.Node>): boolean {\n  if (Node.isExpressionStatement(node)) {\n    const callIdentifier = getCallIdentifier(node);\n    return mochaHooks.includes(callIdentifier);\n  }\n\n  return false;\n}\n\nfunction getMochaCallTitle(node: Node<ts.Node>): string {\n  const callExpression = getChildOfKind(node, SyntaxKind.CallExpression);\n  if (!callExpression) return '';\n\n  const stringLiteral = getChildOfKind(callExpression, SyntaxKind.StringLiteral);\n  if (stringLiteral) {\n    return removeSurroundingChars(stringLiteral.getText());\n  };\n\n  const templateExpression = getChildOfKind(callExpression, SyntaxKind.TemplateExpression);\n  if (templateExpression) {\n    return removeSurroundingChars(templateExpression.getText());\n  }\n\n  return '';\n}\n\nfunction getChildren(node: Node<ts.Node>): Node<ts.Node>[] {\n  const result: Node<ts.Node>[] = [];\n\n  node.forEachChild(child => {\n    result.push(child)\n  });\n  \n  return result;\n}\n\nfunction redundantCurlyBraces(block: Node<ts.Node>): boolean {\n  let redundant = true;\n\n  block.forEachChild(child => {\n    if (Node.isVariableStatement(child) || Node.isFunctionDeclaration(child)) {\n      redundant = false;\n    }\n  });\n\n  return redundant;\n}\n\nfunction removeRedundantCurlyBraces(block: Node<ts.Node>): string {\n  if (redundantCurlyBraces(block)) {\n    return removeSurroundingChars(block.getText());\n  }\n  \n  return block.getFullText();\n}\n\nfunction wrapWithSkipCode(code: string): string {\n  return `\n    {\n      const skip = true;\n      if (!skip) {\n        ${code}\n      }\n    }\n  `;\n}\n\nfunction wrapWithQuotes(text: string): string {\n  if (text.match(/.*\\$\\{.*\\}.*/)) {\n    return '`' + text + '`';\n  }\n\n  return `'${text}'`;\n}\n","import React, { useState, useEffect } from 'react';\nimport Editor from '@monaco-editor/react';\n\nimport exampleSpec from '../fixtures/exampleSpec';\nimport { getParsedSourceFile } from '../utils/typescript';\nimport { getDescribeCalls, flattenDescribeSpecs } from '../utils/mocha';\n\nfunction App() {\n  const [sourceFile, setSourceFile] = useState(getParsedSourceFile(exampleSpec));\n  const [selected, setSelected] = useState<number[]>([]);\n\tconst [disabled, setDisabled] = useState<number[]>([]);\n  const [targetFile, setTargetFile] = useState('');\n\n  useEffect(() => {\n    if (!sourceFile) return;\n\n\t\tconst targetFile = getParsedSourceFile(sourceFile.getFullText());\n\n\t\tconst describes = getDescribeCalls(targetFile.getFirstChild()?.getParent()!);\n\t\tconst selectedDescribes = describes.filter((_, index) => selected.includes(index));\n\n\t\tsetTargetFile(flattenDescribeSpecs(targetFile, selectedDescribes));\n  }, [sourceFile, selected]);\n\n\tfunction onChangeSelected(prev: number[], index: number, checked: boolean): number[] {\n\t\tif (!sourceFile) return [];\n\t\t\n\t\tconst describes = getDescribeCalls(sourceFile);\n\n\t\tlet newSelected = [...prev];\n\t\tlet newDisabled = [...disabled];\n\n\t\tif (checked) {\n\t\t\tnewSelected.push(index);\n\t\t} else {\n\t\t\tnewSelected = newSelected.filter(a => a !== index);\n\t\t}\n\n\t\tif (index < describes.length - 1) {\n\t\t\tconst following = describes\n\t\t\t\t.map((node, index) => ({ node, index }))\n\t\t\t\t.slice(index + 1)\n\n\t\t\tlet levelBelow = true;\n\n\t\t\tfor (let i = 0; i < following.length && levelBelow; i++) {\n\t\t\t\tif (following[i].node.level <= describes[index].level) {\n\t\t\t\t\tlevelBelow = false;\n\t\t\t\t} else {\n\t\t\t\t\tconst ind = following[i].index;\n\t\t\t\t\tif (checked) {\n\t\t\t\t\t\tnewSelected = newSelected.filter(a => a !== ind);\n\t\t\t\t\t\tnewDisabled.includes(ind) || newDisabled.push(ind);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnewDisabled = newDisabled.filter(a => a !== ind);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tsetDisabled(newDisabled);\n\t\treturn newSelected;\n\t}\n\n  return (\n    <div className=\"App\" style={{ display: 'flex', flexDirection: 'row', overflowY: 'hidden' }}>\n      <Editor\n        height=\"100vh\"\n        width=\"40vw\"\n        defaultLanguage=\"typescript\"\n        defaultValue={exampleSpec}\n        onChange={value => {\n\t\t\t\t\tsetDisabled([]);\n\t\t\t\t\tsetSelected([]);\n          if (value) {\n            setSourceFile(getParsedSourceFile(value));\n          }\n        }}\n\t\t\t\toptions={{\n\t\t\t\t\tminimap: {\n\t\t\t\t\t\tenabled: false,\n\t\t\t\t\t},\n\t\t\t\t\tlineNumbers: \"off\",\n\t\t\t\t}}\n      />\n      <div style={{ width: '20vw', padding: 20, borderLeft: '1px solid lightgrey', borderRight: '1px solid lightgrey' }}>\n\t\t\t\t<h2>source spec -{'>'} flattened spec</h2>\n\t\t\t\tSelect <i>describes</i> you want to flatten:\n\t\t\t\t<br /><br />\n        {sourceFile && getDescribeCalls(sourceFile)\n\t\t\t\t\t.map((describe, index) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<div key={index}>\n\t\t\t\t\t\t\t\t<label style={{ paddingLeft: describe.level * 20 }}>\n\t\t\t\t\t\t\t\t\t<input type=\"checkbox\" checked={selected.includes(index)} disabled={disabled.includes(index)} onChange={event => {\n\t\t\t\t\t\t\t\t\t\tsetSelected(prev => {\n\t\t\t\t\t\t\t\t\t\t\treturn onChangeSelected(prev, index, event.target.checked);\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t}} />\n\t\t\t\t\t\t\t\t\t{' '}{describe.title}\n\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t);\n        \t})\n\t\t\t\t}\n      </div>\n      <div>\n        <Editor\n          height=\"100vh\"\n          width=\"40vw\"\n          defaultLanguage=\"typescript\"\n          value={targetFile}\n\t\t\t\t\toptions={{\n\t\t\t\t\t\treadOnly: true,\n\t\t\t\t\t\tminimap: {\n\t\t\t\t\t\t\tenabled: false,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tlineNumbers: \"off\",\n\t\t\t\t\t}}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
{"version":3,"sources":["../node_modules/typescript/lib sync","parseSpec.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","mochaFunctions","getChildOfKind","node","kind","result","forEachChild","n","getKind","removeBraces","trim","substring","length","getBlock","callExpression","SyntaxKind","CallExpression","functionExpression","FunctionExpression","ArrowFunction","Block","getMochaNodeTitle","stringLiteral","StringLiteral","templateExpression","TemplateExpression","getText","getMochaNodes","mochaNodes","Node","isExpressionStatement","expression","getExpression","isCallExpression","isIdentifier","getExpressionIdentifier","includes","block","push","type","title","children","level","parseSpec","specFile","project","Project","sourceFile","createSourceFile","flatten","getFirstChildByKindOrThrow","ExpressionStatement","getParent","_","nodes","forEach","processNew","log","hooks","newLog","structure","before","main","after","rootHooks","befores","filter","afters","map","b","getFullText","join","a","beforeEach","afterEach","currentPart","child","containsItOrDescribe","isBlock","getBlocksInside","replaceWithText","reduce","prev","curr","App","useState","setSpecFile","parsedFile","setParsedFile","selected","setSelected","disabled","setDisabled","processedFile","setProcessedFile","useEffect","parsedFile2","describeIndex","selectedDescribe","processedDescribe","pretty","prettier","format","parser","plugins","parserTypescript","formatText","className","style","display","flexDirection","height","width","defaultLanguage","defaultValue","onChange","value","index","paddingLeft","checked","event","describes","newSelected","newDisabled","following","slice","levelBelow","i","ind","onChangeSelected","target","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ea737d50.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 33;","import { Project, SyntaxKind, Node, ts, ExpressionStatement, SourceFile } from 'ts-morph';\n\nexport interface ParsedSpec {\n\tmochaNodes: MochaNode[];\n\tsourceFile: SourceFile;\n}\n\nexport interface MochaNode {\n  type: string;\n  title: string;\n\tchildren: MochaNode[];\n\tnode: Node<ts.Node>;\n\tlevel: number;\n}\n\nconst mochaFunctions = ['afterEach', 'after', 'beforeEach', 'before', 'describe', 'it'];\n\nfunction getChildOfKind(node: Node<ts.Node>, kind: SyntaxKind): Node<ts.Node> | undefined {\n\tlet result;\n\n\tnode.forEachChild(n => {\n\t\tif (n.getKind() === kind) {\n\t\t\tresult = n;\n\t\t}\n\t});\n\n\treturn result;\n}\n\nfunction removeBraces(code: string): string {\n\treturn code.trim().substring(1, code.length - 1);\n}\n\nexport function getBlock(node: Node<ts.Node>): Node<ts.Node> | undefined {\n  const callExpression = getChildOfKind(node, SyntaxKind.CallExpression);\n  if (!callExpression) return;\n\n  const functionExpression = getChildOfKind(callExpression, SyntaxKind.FunctionExpression) || getChildOfKind(callExpression, SyntaxKind.ArrowFunction);\n  if (!functionExpression) return;\n\n\tconst block = getChildOfKind(functionExpression, SyntaxKind.Block);\n\treturn block;\n}\n\nfunction getMochaNodeTitle(node: Node<ts.Node>): string {\n  const callExpression = getChildOfKind(node, SyntaxKind.CallExpression);\n  if (!callExpression) return '';\n\n  const stringLiteral = getChildOfKind(callExpression, SyntaxKind.StringLiteral);\n  if (!stringLiteral) {\n\t\tconst templateExpression = getChildOfKind(callExpression, SyntaxKind.TemplateExpression);\n\t\tif (!templateExpression) return '';\n\n\t\treturn removeBraces(templateExpression.getText());\n\t};\n\n\t// return stringLiteral && removeBraces(stringLiteral.getText());\n\treturn removeBraces(stringLiteral.getText());\n}\n\nfunction getExpressionIdentifier(node: ExpressionStatement): string {\n\tconst expression = node.getExpression();\n\tif (Node.isCallExpression(expression)) {\n\t\tconst id = expression.getExpression();\n\t\tif (Node.isIdentifier(id)) {\n\t\t\treturn id.getText();\n\t\t}\n\t}\n\n\treturn '';\n}\n\nfunction getMochaNodes(node: Node<ts.Node>): MochaNode[] {\n\tif (!node) return [];\n\n\tconst mochaNodes: MochaNode[] = [];\n\n\tnode.forEachChild(n => {\n\t\tif (Node.isExpressionStatement(n)) {\n\t\t\tconst expression = getExpressionIdentifier(n);\n\t\t\tif (mochaFunctions.includes(expression)) {\n\t\t\t\tconst block = getBlock(n);\n\n\t\t\t\tmochaNodes.push({\n\t\t\t\t\ttype: expression,\n\t\t\t\t\ttitle: getMochaNodeTitle(n),\n\t\t\t\t\tchildren: block ? getMochaNodes(block) : [],\n\t\t\t\t\tnode: n,\n\t\t\t\t\tlevel: 0,\n\t\t\t\t})\n\t\t\t} else {\n\t\t\t\tmochaNodes.push({\n\t\t\t\t\ttype: '',\n\t\t\t\t\ttitle: '',\n\t\t\t\t\tchildren: getMochaNodes(n),\n\t\t\t\t\tnode: n,\n\t\t\t\t\tlevel: 0,\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tmochaNodes.push({\n\t\t\t\ttype: '',\n\t\t\t\ttitle: '',\n\t\t\t\tchildren: getMochaNodes(n),\n\t\t\t\tnode: n,\n\t\t\t\tlevel: 0,\n\t\t\t});\n\t\t}\n\t});\n\n\treturn mochaNodes;\n}\n\nexport default function parseSpec(specFile: string): ParsedSpec {\n  const project = new Project();\n\ttry {\n  \tconst sourceFile = project.createSourceFile('spec.ts', specFile)\n\t\tconst node = sourceFile.getFirstChildByKindOrThrow(SyntaxKind.ExpressionStatement);\n\t\treturn {\n\t\t\tmochaNodes: flatten(getMochaNodes(node.getParent())),\n\t\t\tsourceFile: sourceFile,\n\t\t};\n\t} catch (_) {\n\t\treturn {\n\t\t\tmochaNodes: [],\n\t\t\tsourceFile: project.createSourceFile('error.ts', ''),\n\t\t}\n\t}\n}\n\nfunction flatten(nodes: MochaNode[], level: number = 0): MochaNode[] {\n\tconst result: MochaNode[] = [];\n\n\tnodes.forEach(node => {\n\t\tnode.level = level;\n\t\tresult.push(node);\n\t\tresult.push(...flatten(node.children, level + 1));\n\t});\n\n\treturn result;\n}\n","import React, { useState, useEffect } from 'react';\nimport Editor from '@monaco-editor/react';\nimport prettier from 'prettier/standalone';\nimport parserTypescript from 'prettier/parser-typescript';\nimport { Node } from 'ts-morph';\n\nimport parseSpec, { MochaNode, ParsedSpec, getBlock } from './parseSpec';\n\nconst spec = `\n// paste spec here\n\n// example:\n\ndescribe('test D', () => {\n\n\tbefore(() => {\n\t\tbeforeCommand();\n\t});\n\n\tit('should test 1', () => {\n\t\tcommand1();\n\t});\n\n\tit('should test 2', () => {\n\t\tcommand2();\n\t});\n\n});\n`;\n\nfunction removeBraces(code: string): string {\n\treturn code.trim().substring(1, code.length - 2);\n}\n\ninterface Hooks {\n\tbeforeEach: string;\n\tafterEach: string;\n}\n\nfunction processNew(node: MochaNode, log: string, hooks?: Hooks): string {\n\tif (node.type === 'describe') {\n\t\tconst structure: {\n\t\t\tbefore: string[],\n\t\t\tmain: string[],\n\t\t\tafter: string[],\n\t\t} = {\n\t\t\tbefore: [],\n\t\t\tmain: [],\n\t\t\tafter: [],\n\t\t};\n\n\t\tlet newLog: string;\n\t\tlet children = [...node.children];\n\n\t\tlet rootHooks = '';\n\n\t\tif (log === '__rootDescribe') {\n\t\t\tnewLog = '';\n\n\t\t\tconst befores = children.filter(node => node.type === 'before');\n\t\t\tconst afters = children.filter(node => node.type === 'after');\n\n\t\t\trootHooks += befores.map(b => b.node.getFullText()).join('\\n');\n\t\t\trootHooks += afters.map(a => a.node.getFullText()).join('\\n');\n\n\t\t\tchildren = children.filter(node => node.type !== 'before' && node.type !== 'after');\n\t\t} else {\n\t\t\tnewLog = `${log ? `${log} - ` : ''}${node.title}`;\n\t\t}\n\n\t\tconst beforeEach = children.filter(node => node.type === 'beforeEach').map(n => processNew(n, newLog)).join('\\n');\n\t\tconst afterEach = children.filter(node => node.type === 'afterEach').map(n => processNew(n, newLog)).join('\\n');\n\n\t\tlet currentPart = structure.before;\n\n\t\tchildren.forEach(child => {\n\t\t\tif (child.type === 'before') {\n\t\t\t\tstructure.before.push(processNew(child, newLog));\n\t\t\t} else if (child.type === 'after') {\n\t\t\t\tstructure.after.push(processNew(child, newLog));\n\t\t\t} else if (child.type === 'beforeEach' || child.type === 'afterEach') {\n\n\t\t\t} else {\n\t\t\t\tif (child.type === 'it' || child.type === 'describe' || containsItOrDescribe(child)) {\n\t\t\t\t\tcurrentPart = structure.main;\n\t\t\t\t}\n\n\t\t\t\tcurrentPart.push(processNew(child, newLog, {\n\t\t\t\t\tbeforeEach,\n\t\t\t\t\tafterEach,\n\t\t\t\t}));\n\t\t\t}\n\t\t});\n\n\t\tlet result = '';\n\n\t\tif (log === '__rootDescribe') {\n\t\t\tresult = `\n\t\t\t\t${structure.before.join('\\n')}\n\t\t\t\t\n\t\t\t\t${rootHooks}\n\t\t\t\t\n\t\t\t\tit('should pass', () => {\n\t\t\t\t\t${structure.main.join('\\n')}\n\t\t\t\t});\n\t\t\t`;\n\t\t} else {\n\t\t\tresult = `\n\t\t\t\t${structure.before.join('\\n')}\n\n\t\t\t\t${structure.main.join('\\n')}\n\t\t\t\n\t\t\t\t${structure.after.join('\\n')}\n\t\t\t`;\n\t\t}\n\n\t\tif (hooks) {\n\t\t\treturn hooks.beforeEach + result + hooks.afterEach;\n\t\t} else {\n\t\t\treturn result;\n\t\t}\t\t\n\t} else if (node.type === 'it') {\n\t\tconst block = getBlock(node.node);\n\t\tif (block) {\n\t\t\tlet result: string;\n\n\t\t\tif (hooks) {\n\t\t\t\tresult = hooks.beforeEach + block.getFullText() + hooks.afterEach;\n\t\t\t} else {\n\t\t\t\tresult = block.getFullText();\n\t\t\t}\n\n\t\t\treturn `\n\t\t\t\tcy.log(\\`${`${log ? `${log} - ` : ''}${node.type} ${node.title}`.trim()}\\`);\n\t\t\t\t${result}\n\t\t\t`;\n\t\t} else {\n\t\t\treturn '';\n\t\t}\n\t} else if (node.type !== '') {\n\t\tconst block = getBlock(node.node);\n\t\tif (block) {\n\t\t\treturn `\n\t\t\t\tcy.log(\\`${`${log ? `${log} - ` : ''}${node.type} ${node.title}`.trim()}\\`);\n\t\t\t\t${block.getFullText()}\n\t\t\t`;\n\t\t} else {\n\t\t\treturn '';\n\t\t}\n\t} else if (Node.isBlock(node.node)) {\n\t\tconst result: string[] = [];\n\n\t\tnode.children.forEach(child => {\n\t\t\tresult.push(processNew(child, log, hooks));\n\t\t});\n\n\t\treturn result.join('\\n');\n\t} else {\n\t\tif (containsItOrDescribe(node)) {\n\t\t\tconst blocksInside = getBlocksInside(node);\n\n\t\t\tblocksInside.forEach(block => {\n\t\t\t\tblock.node = block.node.replaceWithText(`{${processNew(block, log)}}`);\n\t\t\t});\n\t\t}\n\t\t\n\t\treturn node.node.getFullText();\n\t}\n}\n\nfunction getBlocksInside(node: MochaNode): MochaNode[] {\n\tconst result: MochaNode[] = [];\n\n\tnode.children.forEach(child => {\n\t\tif (Node.isBlock(child.node)) {\n\t\t\tresult.push(child);\n\t\t} else {\n\t\t\tresult.push(...getBlocksInside(child));\n\t\t}\n\t});\n\n\treturn result;\n}\n\nfunction containsItOrDescribe(node: MochaNode): boolean {\n\treturn node.children.reduce<boolean>((prev, curr) => {\n\t\tif (prev) return true;\n\t\tif (curr.type === 'it' || curr.type === 'describe') return true;\n\t\treturn containsItOrDescribe(curr);\n\t}, false);\n}\n\n// function process(node: MochaNode, log: string, rootDescribe: boolean = false): string {\n// \tif (node.type === 'describe') {\n// \t\tconst befores = node.children.filter(node => node.type === 'before');\n// \t\tconst afters = node.children.filter(node => node.type === 'after');\n// \t\tconst beforeEachs = node.children.filter(node => node.type === 'beforeEach');\n// \t\tconst afterEachs = node.children.filter(node => node.type === 'afterEach');\n// \t\tconst others = node.children.filter(node => node.type === 'it' || node.type === 'describe');\n\n// \t\tconst newLog = `${log ? `${log} - ` : ''}${rootDescribe ? '' : node.title}`\n// \t\tconst processWithLog = (n: MochaNode): string => process(n, newLog);\n\n// \t\treturn `\n// \t\t\t${befores.map(processWithLog).join('\\n')}\n\n// \t\t\t${others.map(other => {\n// \t\t\t\treturn `\n// \t\t\t\t\t${beforeEachs.map(processWithLog).join('\\n')}\n\n// \t\t\t\t\t${processWithLog(other)}\n\n// \t\t\t\t\t${afterEachs.map(processWithLog).join('\\n')}\n// \t\t\t\t`;\n// \t\t\t}).join('\\n')}\n\n// \t\t\t${afters.map(processWithLog).join('\\n')}\n// \t\t`;\n// \t} else {\n// \t\tconst block = getBlock(node.node);\n// \t\treturn block ? `\n// \t\t\tcy.log('${`${log ? `${log} - ` : ''}${node.type} ${node.title}`.trim()}');\n// \t\t\t${block.getFullText()}\n// \t\t` : '';\n// \t}\n// }\n\nfunction App() {\n  const [specFile, setSpecFile] = useState(spec);\n  const [parsedFile, setParsedFile] = useState<ParsedSpec | undefined>();\n  const [selected, setSelected] = useState<number[]>([]);\n\tconst [disabled, setDisabled] = useState<number[]>([]);\n  const [processedFile, setProcessedFile] = useState('');\n\n\tuseEffect(() => {\n\t\tsetParsedFile(parseSpec(specFile));\n\t}, [specFile]);\n\n  useEffect(() => {\n    if (!specFile) return;\n\n    const parsedFile2 = parseSpec(specFile);\n\n\t\tselected.forEach(describeIndex => {\n\t\t\tconst selectedDescribe = parsedFile2.mochaNodes\n\t\t\t\t.filter(node => node.type === 'describe')[describeIndex];\n\n\t\t\tconst processedDescribe = processNew(selectedDescribe, '__rootDescribe');\n\n\t\t\tconst result = `\n\t\t\t\tdescribe(\\`${selectedDescribe.title}\\`, () => {\n\t\t\t\t\t${processedDescribe}\n\t\t\t\t});\n\t\t\t`\n\n\t\t\tselectedDescribe.node = selectedDescribe.node.replaceWithText(result);\n\t\t});\n\t\t\t\n\t\ttry {\n\t\t\tconst pretty = prettier.format(parsedFile2.sourceFile.getText(), { parser: 'typescript', plugins: [ parserTypescript ]})\n\t\t\tsetProcessedFile(pretty);\n\t\t} catch (_) {\n\t\t\tparsedFile2.sourceFile.formatText();\n\t\t\tsetProcessedFile(parsedFile2.sourceFile.getText());\n\t\t}\n  }, [specFile, selected]);\n\n\tfunction onChangeSelected(prev: number[], index: number, checked: boolean): number[] {\n\t\tif (!parsedFile) return [];\n\t\t\n\t\tconst describes = parsedFile.mochaNodes.filter(node => node.type === 'describe');\n\n\t\tlet newSelected = [...prev];\n\t\tlet newDisabled = [...disabled];\n\n\t\tif (checked) {\n\t\t\tnewSelected.push(index);\n\t\t} else {\n\t\t\tnewSelected = newSelected.filter(a => a !== index);\n\t\t}\n\n\t\tif (index < describes.length - 1) {\n\t\t\tconst following = describes\n\t\t\t\t.map((node, index) => ({ node, index }))\n\t\t\t\t.slice(index + 1)\n\n\t\t\tlet levelBelow = true;\n\n\t\t\tfor (let i = 0; i < following.length && levelBelow; i++) {\n\t\t\t\tif (following[i].node.level <= describes[index].level) {\n\t\t\t\t\tlevelBelow = false;\n\t\t\t\t} else {\n\t\t\t\t\tconst ind = following[i].index;\n\t\t\t\t\tif (checked) {\n\t\t\t\t\t\tnewSelected = newSelected.filter(a => a !== ind);\n\t\t\t\t\t\tnewDisabled.includes(ind) || newDisabled.push(ind);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnewDisabled = newDisabled.filter(a => a !== ind);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tsetDisabled(newDisabled);\n\t\treturn newSelected;\n\t}\n\n  return (\n    <div className=\"App\" style={{ display: 'flex', flexDirection: 'row' }}>\n      <Editor\n        height=\"90vh\"\n        width=\"40vw\"\n        defaultLanguage=\"typescript\"\n        defaultValue={specFile}\n        onChange={value => {\n\t\t\t\t\tsetDisabled([]);\n\t\t\t\t\tsetSelected([]);\n          if (value) {\n            setSpecFile(value);\n          }\n        }}\n      />\n      <div style={{ width: '20vw' }}>\n\t\t\t\t<br />\n\t\t\t\tSelect describes you want to merge into one it:\n\t\t\t\t<br /><br />\n        {parsedFile && parsedFile\n\t\t\t\t\t.mochaNodes\n\t\t\t\t\t.filter(node => node.type === 'describe')\n\t\t\t\t\t.map((node, index) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<div key={index}>\n\t\t\t\t\t\t\t\t<label style={{ paddingLeft: node.level * 20 }}>\n\t\t\t\t\t\t\t\t\t<input type=\"checkbox\" checked={selected.includes(index)} disabled={disabled.includes(index)} onChange={event => {\n\t\t\t\t\t\t\t\t\t\tsetSelected(prev => {\n\t\t\t\t\t\t\t\t\t\t\treturn onChangeSelected(prev, index, event.target.checked);\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t}} />\n\t\t\t\t\t\t\t\t\t{' '}{node.title}\n\t\t\t\t\t\t\t\t</label>\n\t\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t);\n        \t})\n\t\t\t\t}\n      </div>\n      <div>\n        <Editor\n          height=\"90vh\"\n          width=\"40vw\"\n          defaultLanguage=\"typescript\"\n          value={processedFile}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}